include:
  - project: auros/ci-pipeline-includes
    ref: master
    file: Container-Scanning.yml

stages:
  - build
  - audit

variables:
  ENCLAVE_BUILD_IMAGE: registry.gitlab.com/auros/enclave-builder@sha256:5ebd1fe845df7d5751f4c95171002cca37b922dc1cf8add28d5961a8ea471952
  DOCKER_HOST: tcp://docker:2375


default:
  image:
    name: $ENCLAVE_BUILD_IMAGE
    entrypoint: [""]
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24-dind
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  retry: 2


.build and publish enclave:
  stage: build
  script:
  - export CONTAINER_NAME=${PROCESS_NAME}
  - echo ${SSH_PRIVATE_KEY_BASE64} | base64 -d -w 0 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-keyscan bitbucket.org >> ~/.ssh/known_hosts
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - git clone --depth 1 ${CONFIG_REPO_URI} config
  - export _NORMALISED_NAME=${PROCESS_NAME//-/_}
  - export _NORMALISED_NAME=${_NORMALISED_NAME^^}
  - export _INFERRED_VAULT_APPROLE_ID=VAULT_APPROLE_ID_${_NORMALISED_NAME}
  - export _INFERRED_VAULT_SECRET_ID=VAULT_SECRET_ID_${_NORMALISED_NAME}
  - export _INFERRED_VAULT_WALLET_NAME=VAULT_WALLET_NAME_${_NORMALISED_NAME}
  - export VAULT_APPROLE_ID=${!_INFERRED_VAULT_APPROLE_ID}
  - export VAULT_SECRET_ID=${!_INFERRED_VAULT_SECRET_ID}
  - export VAULT_WALLET_NAME=${!_INFERRED_VAULT_WALLET_NAME}
  - "[[ \"${VAULT_APPROLE_ID}\" ]] || { echo \"VAULT_APPROLE_ID is not defined\"; exit 1; }"
  - "[[ \"${VAULT_SECRET_ID}\" ]] || { echo \"VAULT_SECRET_ID is not defined\"; exit 1; }"
  - "[[ \"${VAULT_WALLET_NAME}\" ]] || { echo \"VAULT_WALLET_NAME is not defined\"; exit 1; }"
  - "[[ -f config/${PROCESS_NAME}.json ]] || { echo \"No config found for ${PROCESS_NAME}\"; exit 1; }"
  - export CONTEXT_ID=$(jq -r '.enclave.cid | select(. != null)' config/${PROCESS_NAME}.json)
  - rm -rf config
  - "[[ \"${TS_DEX_PATH}\" ]] && { DOCKERFILE=Dockerfile.ts; ADDITIONAL_BUILD_ARGS=\"${ADDITIONAL_BUILD_ARGS} --build-arg TS_DEX_PATH=${TS_DEX_PATH}\"; }"
  - "[[ \"${WALLET_FORMAT}\" ]] && { ADDITIONAL_BUILD_ARGS=\"${ADDITIONAL_BUILD_ARGS} --build-arg WALLET_FORMAT=${WALLET_FORMAT}\"; }"
  - ADDITIONAL_BUILD_ARGS=${ADDITIONAL_BUILD_ARGS} DOCKERFILE=${DOCKERFILE} ./ImageBuilder.sh --enclave


# Some auxiliary applications in this repo need to be containerised, but not with an enclave userland.
.build and publish container:
  stage: build
  script:
    - ./ImageBuilder.sh


.build on all commits and merge requests:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH


.enclaves: &enclaves
  - PROCESS_NAME: dex_proxy-dexa-main
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-dexa-fuji
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
  - PROCESS_NAME: dex_proxy-uni3-goerli-4
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
  - PROCESS_NAME: dex_proxy-uni3-goerli-5
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
  - PROCESS_NAME: dex_proxy-chainEth-uni3-main-1
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-pdex-main
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-pdex-testnet
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
  - PROCESS_NAME: dex_proxy-lyra-testnet
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
  - PROCESS_NAME: dex_proxy-lyra-1
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-lyra-2
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-lyra-3
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-lyra-4
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-lyra-5
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-lyra-6
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
  - PROCESS_NAME: dex_proxy-deep-1
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
    TS_DEX_PATH: dexes/deepbook
    WALLET_FORMAT: sui
  - PROCESS_NAME: dex_proxy-deep-2
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-dev.git
    TS_DEX_PATH: dexes/deepbook
    WALLET_FORMAT: sui
  - PROCESS_NAME: dex_proxy-deep-main
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
    TS_DEX_PATH: dexes/deepbook
    WALLET_FORMAT: sui
  - PROCESS_NAME: dex_proxy-deep-main-2
    CONFIG_REPO_URI: git@bitbucket.org:kenetic/config-prod.git
    TS_DEX_PATH: dexes/deepbook
    WALLET_FORMAT: sui


# Use this for applications in this repo that need to be containerised, but not enclaved.
.containers: &containers
  - CONTAINER_NAME: dex-proxy-deepbook
    DOCKERFILE: Dockerfile.deepbook


build enclaves:
  extends:
    - .build and publish enclave
    - .build on all commits and merge requests
  parallel:
    matrix: *enclaves


build containers:
  extends:
    - .build and publish container
    - .build on all commits and merge requests
  parallel:
    matrix: *containers


# Don't allow the default scan job to run - we split it out into different jobs.
container_scanning:
  rules:
    - when: never


.container scanning:
  extends:
    - container_scanning
    - .build on all commits and merge requests
  before_script: []
  variables:
    CS_IMAGE: ${CI_REGISTRY_IMAGE}/${PROCESS_NAME}${CONTAINER_NAME}:${CI_COMMIT_SHA}
    DTRACK_PROJECT_NAME: ${PROCESS_NAME}${CONTAINER_NAME}
    DTRACK_PROJECT_VERSION: ${CI_COMMIT_SHA}


audit enclave userlands:
  extends:
    - .container scanning
  parallel:
    matrix: *enclaves
  needs:
    - job: build enclaves
      parallel:
        matrix: *enclaves


audit container userlands:
  extends:
    - .container scanning
  parallel:
    matrix: *containers
  needs:
    - job: build containers
      parallel:
        matrix: *containers
